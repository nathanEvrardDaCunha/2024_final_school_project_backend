import {PrismaClient, User, Prisma, UserStatus} from '@prisma/client';const prisma = new PrismaClient();export async function createUser(userData: Prisma.UserCreateInput): Promise<User> {	return prisma.user.create({		data: userData,	});}export async function getAllUsers(): Promise<User[]> {	return prisma.user.findMany();}export async function findUserByEmail(email: string): Promise<User | null> {	return prisma.user.findUnique({		where: { email },	});}export async function updateUserStatus(userId: number, status: UserStatus): Promise<User> {	return prisma.user.update({		where: { id: userId },		data: { status },	});}export async function deleteUser(userId: number): Promise<User> {	return prisma.user.delete({		where: { id: userId },	});}export async function deleteUserServices(userId: number): Promise<Prisma.BatchPayload> {	return prisma.service.deleteMany({		where: { reservation: { userId: userId } },	});}export async function deleteUserReservations(userId: number): Promise<Prisma.BatchPayload> {	return prisma.reservation.deleteMany({		where: { userId: userId },	});}export async function deleteUserDocuments(userId: number): Promise<Prisma.BatchPayload> {	return prisma.document.deleteMany({		where: { location: { userId: userId } },	});}export async function deleteUserPerks(userId: number): Promise<Prisma.BatchPayload> {	return prisma.perk.deleteMany({		where: { location: { userId: userId } },	});}export async function deleteUserLocations(userId: number): Promise<Prisma.BatchPayload> {	return prisma.location.deleteMany({		where: { userId: userId },	});}