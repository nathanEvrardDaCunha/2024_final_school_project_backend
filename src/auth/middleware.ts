import { Request, Response, NextFunction } from 'express';import jwt from 'jsonwebtoken';interface DecodedToken {	userId: number;	status: string;}export function isAuthenticated(req: Request, res: Response, next: NextFunction) {	const authHeader = req.headers.authorization;	if (!authHeader) {		return res.status(401).json({ error: 'No token provided' });	}		const token = authHeader.split(' ')[1];	try {		const decoded = jwt.verify(token, process.env.JWT_SECRET!) as DecodedToken;		(req as any).user = { id: decoded.userId, status: decoded.status };		next();	} catch (error) {		return res.status(401).json({ error: 'Invalid token' });	}}export function isAdmin(req: Request, res: Response, next: NextFunction) {	const authHeader = req.headers.authorization;	if (!authHeader) {		return res.status(401).json({ error: 'No token provided' });	}		const token = authHeader.split(' ')[1];	try {		const decoded = jwt.verify(token, process.env.JWT_SECRET!) as DecodedToken;		if (decoded.status !== 'ADMIN') {			return res.status(403).json({ error: 'Access denied. Admin only.' });		}		(req as any).user = { id: decoded.userId, status: decoded.status };		next();	} catch (error) {		return res.status(401).json({ error: 'Invalid token' });	}}