import { Prisma, User, UserStatus } from '@prisma/client';import { createUser, findUserByEmail, getAllUsers } from './repository';import jwt from 'jsonwebtoken';export async function register(userData: {	firstname: string;	lastname: string;	email: string;	password: string;	phoneNumber: string;	birthDate: Date;	isRenter: boolean;}): Promise<User> {	try {		const existingUser = await findUserByEmail(userData.email);		if (existingUser) {			throw new Error('User with this email already exists');		}				const { isRenter, ...userDataWithoutIsRenter } = userData;				return await createUser({			...userDataWithoutIsRenter,			status: isRenter ? UserStatus.BAILLEUR_GRATUIT : UserStatus.CLIENT_GRATUIT,		});	} catch (error: unknown) {		if (error instanceof Error) {			throw new Error('Failed to register user: ' + error.message);		} else {			throw new Error('Failed to register user: Unknown error');		}	}}export async function fetchAllUsers(): Promise<User[]> {	try {		return await getAllUsers();	} catch (error: unknown) {		if (error instanceof Error) {			throw new Error('Failed to fetch users: ' + error.message);		} else {			throw new Error('Failed to fetch users: Unknown error');		}	}}export async function login(email: string, password: string): Promise<{ user: User, token: string }> {	try {		const user = await findUserByEmail(email);		if (!user) {			throw new Error('Invalid email or password');		}				if (user.status === 'BANNED' || user.status === 'SUSPENDED') {			throw new Error('Failed login: account banned or suspended');		}				if (user.password !== password) {			throw new Error('Invalid email or password');		}				const token = jwt.sign(			{ userId: user.id, status: user.status },			process.env.JWT_SECRET!,			{ expiresIn: '1h' }		);				return { user, token };	} catch (error: unknown) {		if (error instanceof Error) {			throw new Error('Login failed: ' + error.message);		} else {			throw new Error('Login failed: Unknown error');		}	}}