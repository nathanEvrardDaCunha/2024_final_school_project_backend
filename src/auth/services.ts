import { Prisma, User, UserStatus } from '@prisma/client';import { createUser, findUserByEmail, getAllUsers } from './repository';export async function register(userData: Omit<Prisma.UserCreateInput, 'status'>): Promise<User> {	try {		const existingUser = await findUserByEmail(userData.email);		if (existingUser) {			throw new Error('User with this email already exists');		}				return await createUser({			...userData,			status: UserStatus.MEMBER,		});	} catch (error: unknown) {		if (error instanceof Error) {			throw new Error('Failed to register user: ' + error.message);		} else {			throw new Error('Failed to register user: Unknown error');		}	}}export async function fetchAllUsers(): Promise<User[]> {	try {		return await getAllUsers();	} catch (error: unknown) {		if (error instanceof Error) {			throw new Error('Failed to fetch users: ' + error.message);		} else {			throw new Error('Failed to fetch users: Unknown error');		}	}}