// src/services/serviceService.tsimport {PrismaClient, ServiceName, ServicePrice} from '@prisma/client';import Stripe from 'stripe';const prisma = new PrismaClient();if (!process.env.STRIPE_SECRET_KEY) {	throw new Error('Missing STRIPE_SECRET_KEY in environment variables');}const stripe = new Stripe(process.env.STRIPE_SECRET_KEY!, {	apiVersion: '2024-06-20',});const serviceNameToIndex = (name: ServiceName): number => {	return Object.values(ServiceName).indexOf(name);};const getServicePrice = (index: number): number => {	const prices = [20, 30, 40, 50, 60, 75, 80, 100, 120, 150, 200, 250, 300, 350, 400, 450, 500, 600, 750, 1000];	return prices[index] || 0;};export const createPaymentIntent = async (serviceId: ServiceName, reservationId: number) => {	const serviceIndex = serviceNameToIndex(serviceId);	const amount = getServicePrice(serviceIndex) * 100; // Convert to cents		const paymentIntent = await stripe.paymentIntents.create({		amount,		currency: 'usd',		metadata: { serviceId, reservationId: reservationId.toString() },	});		return paymentIntent.client_secret;};export const bookService = async (serviceName: ServiceName, reservationId: number) => {	const serviceIndex = serviceNameToIndex(serviceName);	const servicePrice = Object.values(ServicePrice)[serviceIndex] as ServicePrice;		return prisma.service.create({		data: {			name: serviceName,			price: servicePrice,			reservationId: reservationId,		},	});};export const getServices = async (): Promise<Array<{ name: ServiceName; price: string }>> => {	return Object.values(ServiceName).map((name, index) => ({		name,		price: `$${getServicePrice(index)}`,	}));};