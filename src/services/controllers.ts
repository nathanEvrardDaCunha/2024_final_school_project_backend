import { Request, Response } from 'express';import { ServiceName, User } from '@prisma/client';import {	bookService,	createPaymentIntent,	getServices,	getFreeServiceStatus,	deleteAvisService, createAvisService, getServicesWithAvis} from "./services";// Define a type for our custom propertiestype AuthProperties = {	userId?: number;	reservationUser?: User;};// Use type intersection to combine Request with our custom propertiestype AuthenticatedRequest = Request & AuthProperties;export const createPaymentIntentController = async (req: AuthenticatedRequest, res: Response) => {	try {		const { serviceId, reservationId } = req.body;		const clientSecret = await createPaymentIntent(serviceId as ServiceName, reservationId);		res.json({ clientSecret });	} catch (error) {		console.error('Error in createPaymentIntentController:', error);		res.status(500).json({ error: 'Failed to create payment intent' });	}};export const bookServiceController = async (req: AuthenticatedRequest, res: Response) => {	try {		const { serviceName, reservationId } = req.body;		const userId = req.userId;		if (!userId) {			return res.status(401).json({ error: 'User not authenticated' });		}		const bookedService = await bookService(serviceName as ServiceName, reservationId, userId);		res.json(bookedService);	} catch (error) {		console.error('Error in bookServiceController:', error);		res.status(500).json({ error: 'Failed to book service' });	}};export const getServicesController = async (req: AuthenticatedRequest, res: Response) => {	try {		const services = await getServices();		res.json(services);	} catch (error) {		console.error('Error in getServicesController:', error);		res.status(500).json({ error: 'Failed to get services' });	}};export const getFreeServiceStatusController = async (req: AuthenticatedRequest, res: Response) => {	try {		const userId = req.userId;		if (!userId) {			return res.status(401).json({ error: 'User not authenticated' });		}		const freeServiceStatus = await getFreeServiceStatus(userId);		res.json(freeServiceStatus);	} catch (error) {		console.error('Error in getFreeServiceStatusController:', error);		res.status(500).json({ error: 'Failed to get free service status' });	}};export const getServicesWithAvisController = async (req: AuthenticatedRequest, res: Response) => {	try {		const services = await getServicesWithAvis();		res.json(services);	} catch (error) {		console.error('Error in getServicesWithAvisController:', error);		res.status(500).json({ error: 'Failed to get services with avis' });	}};export const createAvis = async (req: Request, res: Response) => {	try {		const { serviceId, reactivity, disponibility, quality } = req.body;		const userId = (req as any).userId;		const avis = await createAvisService(userId, serviceId, reactivity, disponibility, quality);		res.status(201).json(avis);	} catch (error) {		console.error('Error in createAvis:', error);		res.status(500).json({ error: 'Failed to create Avis' });	}};export const deleteAvis = async (req: Request, res: Response) => {	try {		const serviceId = parseInt(req.params.serviceId);		const userId = (req as any).userId;		await deleteAvisService(userId, serviceId);		res.status(200).json({ message: 'Avis deleted successfully' });	} catch (error) {		console.error('Error in deleteAvis:', error);		res.status(500).json({ error: 'Failed to delete Avis' });	}};