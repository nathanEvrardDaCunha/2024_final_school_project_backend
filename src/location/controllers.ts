import { Request, Response } from 'express';import { LocationType, LocationGoodType } from '@prisma/client';import {estimateLocationPrice, getLocationsToReview, saveLocation} from "./services";export async function estimateLocationPriceController(req: Request, res: Response): Promise<void> {	try {		const { surfaceM2, numberOfBed, maxNumberOfPerson, country, locationType, locationGoodType } = req.body;				const estimatedPrice = await estimateLocationPrice({			surfaceM2,			numberOfBed,			maxNumberOfPerson,			country,			locationType: locationType as LocationType,			locationGoodType: locationGoodType as LocationGoodType		});				res.status(200).json({			message: 'Price estimated successfully',			estimatedPrice		});	} catch (error) {		if (error instanceof Error) {			console.error('Error estimating location price:', error);			res.status(400).json({ error: error.message });		} else {			console.error('An unknown error occurred:', error);			res.status(500).json({ error: 'An unknown error occurred' });		}	}}export async function saveLocationController(req: Request, res: Response): Promise<void> {	try {		const userId = (req as any).userId;				console.log('Received save location request:', req.body);				const savedLocation = await saveLocation({			surfaceM2: Number(req.body.surfaceM2),			numberOfBed: Number(req.body.numberOfBed),			maxNumberOfPerson: Number(req.body.maxNumberOfPerson),			country: req.body.country,			street: req.body.street,			locationType: req.body.locationType as LocationType,			locationGoodType: req.body.locationGoodType as LocationGoodType,			pricePerNight: Number(req.body.pricePerNight),			title: req.body.title,			description: req.body.description,			user: { connect: { id: userId } }		});				console.log('Location saved in controller:', savedLocation);				if (!savedLocation.id) {			throw new Error('Location saved but no id was returned');		}				res.status(201).json({			message: 'Location saved successfully',			location: {				id: savedLocation.id,				surfaceM2: savedLocation.surfaceM2,				numberOfBed: savedLocation.numberOfBed,				maxNumberOfPerson: savedLocation.maxNumberOfPerson,				country: savedLocation.country,				street: savedLocation.street,				locationType: savedLocation.locationType,				locationGoodType: savedLocation.locationGoodType,				pricePerNight: savedLocation.pricePerNight,				title: savedLocation.title,				description: savedLocation.description,				locationStatus: savedLocation.locationStatus			}		});	} catch (error) {		if (error instanceof Error) {			console.error('Error saving location:', error);			res.status(400).json({ error: error.message });		} else {			console.error('An unknown error occurred:', error);			res.status(500).json({ error: 'An unknown error occurred' });		}	}}export async function getLocationsToReviewController(req: Request, res: Response): Promise<void> {	try {		const locations = await getLocationsToReview();		res.status(200).json(locations);	} catch (error) {		console.error('Error fetching locations to review:', error);		res.status(500).json({ error: 'An error occurred while fetching locations' });	}}