import { LocationType, LocationGoodType, LocationStatus, Prisma, Location } from '@prisma/client';import { createLocation } from './repository';export interface EstimateLocationPriceParams {	surfaceM2: number;	numberOfBed: number;	maxNumberOfPerson: number;	country: string;	locationType: LocationType;	locationGoodType: LocationGoodType;}export async function estimateLocationPrice(params: EstimateLocationPriceParams): Promise<number> {	let basePrice = 50;		basePrice += params.surfaceM2 * 0.5;	basePrice += params.numberOfBed * 10;	basePrice += params.maxNumberOfPerson * 5;		switch (params.locationType) {		case 'APARTMENT':			basePrice *= 1;			break;		case 'HOUSE':			basePrice *= 1.2;			break;		case 'VILLA':			basePrice *= 1.5;			break;		case 'CABIN':			basePrice *= 1.1;			break;		case 'STUDIO':			basePrice *= 0.9;			break;		case 'LOFT':			basePrice *= 1.1;			break;	}		switch (params.locationGoodType) {		case 'ENTIRE_PLACE':			basePrice *= 1.2;			break;		case 'PRIVATE_ROOM':			basePrice *= 0.8;			break;		case 'SHARED_ROOM':			basePrice *= 0.6;			break;	}		return Math.round(basePrice * 100) / 100;}export async function saveLocation(params: {	country: string;	locationGoodType: LocationGoodType;	maxNumberOfPerson: number;	surfaceM2: number;	numberOfBed: number;	street: string;	locationType: LocationType;	description: string;	title: string;	user: { connect: { id: number } };	pricePerNight: number;}): Promise<Location> {	const locationData: Prisma.LocationCreateInput = {		surfaceM2: params.surfaceM2,		numberOfBed: params.numberOfBed,		maxNumberOfPerson: params.maxNumberOfPerson,		country: params.country,		street: params.street,		locationType: params.locationType,		locationGoodType: params.locationGoodType,		pricePerNight: params.pricePerNight,		title: params.title,		description: params.description,		locationStatus: LocationStatus.SUSPENDED,		user: params.user	};		return createLocation(locationData);}