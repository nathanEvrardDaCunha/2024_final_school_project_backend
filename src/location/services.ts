import {LocationType, LocationGoodType, LocationStatus, Prisma, Location, DocumentStatus, DocumentType} from '@prisma/client';import {	addDocumentToLocation,	createLocation,	getLocationFromDB,	getLocationsToReviewFromDB, removeDocumentFromDB,	updateLocationStatus} from "./repository";import fs from 'fs';export interface EstimateLocationPriceParams {	surfaceM2: number;	numberOfBed: number;	maxNumberOfPerson: number;	country: string;	locationType: LocationType;	locationGoodType: LocationGoodType;}export async function estimateLocationPrice(params: EstimateLocationPriceParams): Promise<number> {	let basePrice = 50;		basePrice += params.surfaceM2 * 0.5;	basePrice += params.numberOfBed * 10;	basePrice += params.maxNumberOfPerson * 5;		switch (params.locationType) {		case 'APARTMENT':			basePrice *= 1;			break;		case 'HOUSE':			basePrice *= 1.2;			break;		case 'VILLA':			basePrice *= 1.5;			break;		case 'CABIN':			basePrice *= 1.1;			break;		case 'STUDIO':			basePrice *= 0.9;			break;		case 'LOFT':			basePrice *= 1.1;			break;	}		switch (params.locationGoodType) {		case 'ENTIRE_PLACE':			basePrice *= 1.2;			break;		case 'PRIVATE_ROOM':			basePrice *= 0.8;			break;		case 'SHARED_ROOM':			basePrice *= 0.6;			break;	}		return Math.round(basePrice * 100) / 100;}export async function saveLocation(params: {	country: string;	locationGoodType: LocationGoodType;	maxNumberOfPerson: number;	surfaceM2: number;	numberOfBed: number;	street: string;	locationType: LocationType;	description: string;	title: string;	user: { connect: { id: number } };	pricePerNight: number;}): Promise<Location> {	const locationData: Prisma.LocationCreateInput = {		surfaceM2: params.surfaceM2,		numberOfBed: params.numberOfBed,		maxNumberOfPerson: params.maxNumberOfPerson,		country: params.country,		street: params.street,		locationType: params.locationType,		locationGoodType: params.locationGoodType,		pricePerNight: params.pricePerNight,		title: params.title,		description: params.description,		locationStatus: LocationStatus.BEFORE_PAYMENT,		user: params.user	};		const savedLocation = await createLocation(locationData);	console.log('Location saved in service:', savedLocation);		if (!savedLocation.id) {		throw new Error('Location saved but no id was returned');	}		return savedLocation;}export async function getLocationsToReview() {	return await getLocationsToReviewFromDB();}export async function getLocation(locationId: number) {	return await getLocationFromDB(locationId);}export async function uploadLocationImage(locationId: number, file: Express.Multer.File) {	const fileBuffer = fs.readFileSync(file.path);	const document = await addDocumentToLocation(locationId, {		file: fileBuffer,		filename: file.originalname,		documentType: DocumentType.PAPER_ASSET,		documentStatus: DocumentStatus.AVAILABLE	});	fs.unlinkSync(file.path); // Delete the file after storing in DB	return await getLocationFromDB(locationId);}export async function completeLocationPaperwork(locationId: number) {	return await updateLocationStatus(locationId, LocationStatus.BEFORE_PUBLISHING);}export async function removeDocument(locationId: number, documentId: number) {	return await removeDocumentFromDB(locationId, documentId);}