import { User } from '@prisma/client';import { findUserById, updateUserById, findUserByIdWithPassword } from './repository';export async function getUserInfo(userId: number): Promise<Omit<User, 'password'> | null> {	try {		const user = await findUserById(userId);		if (!user) {			return null;		}				const { password, ...userInfo } = user;		return userInfo;	} catch (error: unknown) {		if (error instanceof Error) {			throw new Error('Failed to fetch user info: ' + error.message);		} else {			throw new Error('Failed to fetch user info: Unknown error');		}	}}export async function updateUserInfo(userId: number, updateData: Partial<{	email: string;	firstname: string;	lastname: string;	birthDate: Date;	phoneNumber: string;}>): Promise<Omit<User, 'password'> | null> {	try {		const user = await updateUserById(userId, updateData);		if (!user) {			return null;		}				const { password, ...userInfo } = user;		return userInfo;	} catch (error: unknown) {		if (error instanceof Error) {			throw new Error('Failed to update user info: ' + error.message);		} else {			throw new Error('Failed to update user info: Unknown error');		}	}}export async function changeUserPassword(userId: number, currentPassword: string, newPassword: string): Promise<Omit<User, 'password'> | null> {	try {		const user = await findUserByIdWithPassword(userId);		if (!user) {			throw new Error('User not found');		}				if (user.password !== currentPassword) {			throw new Error('Current password is incorrect');		}				const updatedUser = await updateUserById(userId, { password: newPassword });				if (!updatedUser) {			return null;		}				const { password, ...userInfo } = updatedUser;		return userInfo;	} catch (error: unknown) {		if (error instanceof Error) {			throw new Error('Failed to change password: ' + error.message);		} else {			throw new Error('Failed to change password: Unknown error');		}	}}