import { Request, Response, NextFunction } from 'express';import jwt from 'jsonwebtoken';import {prisma} from "../index";export const authenticateToken = (req: Request, res: Response, next: NextFunction) => {	const authHeader = req.headers['authorization'];	const token = authHeader && authHeader.split(' ')[1];		if (token == null) return res.sendStatus(401);		jwt.verify(token, process.env.JWT_SECRET as string, (err: any, user: any) => {		if (err) return res.sendStatus(403);		(req as any).userId = user.userId;		next();	});};interface JwtPayload {	userId: number;}export const authenticateReservationUser = async (req: Request, res: Response, next: NextFunction) => {	const authHeader = req.headers['authorization'];	const token = authHeader && authHeader.split(' ')[1];		if (!token) {		return res.status(401).json({ error: 'Authentication token is required' });	}		try {		const payload = jwt.verify(token, process.env.JWT_SECRET as string) as JwtPayload;		const user = await prisma.user.findUnique({ where: { id: payload.userId } });				if (!user) {			return res.status(403).json({ error: 'User not found' });		}				(req as any).reservationUser = user;		next();	} catch (error) {		console.error('Error in authenticateReservationUser:', error);		return res.status(403).json({ error: 'Invalid or expired token' });	}};