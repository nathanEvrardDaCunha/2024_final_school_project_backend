generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int           @id @default(autoincrement())
  email           String        @unique
  firstname       String
  lastname        String
  status          UserStatus
  birthDate       DateTime
  password        String
  phoneNumber     String        @unique
  locations       Location[]
  reservations    Reservation[]
  freeServiceUsed Boolean       @default(false)
}

model Location {
  id                Int              @id @default(autoincrement())
  surfaceM2         Float
  numberOfBed       Int
  maxNumberOfPerson Int
  country           String
  street            String
  locationType      LocationType
  locationGoodType  LocationGoodType
  pricePerNight     Float
  locationStatus    LocationStatus
  title             String
  description       String
  user              User             @relation(fields: [userId], references: [id])
  userId            Int
  documents         Document[]
  perks             Perk[]
  reservations      Reservation[]
  avis              Avis[]
}

model Document {
  id             Int            @id @default(autoincrement())
  file           Bytes
  filename       String
  documentType   DocumentType
  documentStatus DocumentStatus
  location       Location       @relation(fields: [locationId], references: [id])
  locationId     Int
}

model Perk {
  id         Int        @id @default(autoincrement())
  perkStatus PerkStatus
  perkName   String
  perkType   PerkType
  location   Location   @relation(fields: [locationId], references: [id])
  locationId Int
}

model Reservation {
  id                    Int       @id @default(autoincrement())
  numberOfPeople        Int
  numberOfNights        Int
  startDate             DateTime
  endDate               DateTime
  isForRentor           Boolean
  user                  User      @relation(fields: [userId], references: [id])
  userId                Int
  location              Location  @relation(fields: [locationId], references: [id])
  locationId            Int
  stripePaymentIntentId String?
  services              Service[]
}

model Service {
  id            Int          @id @default(autoincrement())
  name          ServiceName
  price         ServicePrice
  reservation   Reservation  @relation(fields: [reservationId], references: [id])
  reservationId Int
  avis          Avis[]
}

model Avis {
  id            Int       @id @default(autoincrement())
  reactivity    Int
  disponibility Int
  quality       Int
  location      Location? @relation(fields: [locationId], references: [id])
  locationId    Int?
  service       Service?  @relation(fields: [serviceId], references: [id])
  serviceId     Int?
}

enum UserStatus {
  ADMIN
  RENTER
  FREE
  BAGPACKER_MONTHLY
  BAGPACKER_YEARLY
  EXPLORATOR_MONTHLY
  EXPLORATOR_YEARLY
  BANNED_RENTER
  BANNED_FREE
  BANNED_BAGPACKER_MONTHLY
  BANNED_BAGPACKER_YEARLY
  BANNED_EXPLORATOR_MONTHLY
  BANNED_EXPLORATOR_YEARLY
}

enum LocationType {
  APARTMENT
  HOUSE
  VILLA
  CABIN
  STUDIO
  LOFT
}

enum LocationGoodType {
  ENTIRE_PLACE
  PRIVATE_ROOM
  SHARED_ROOM
}

enum LocationStatus {
  SUSPENDED
  PUBLISHED
  BEFORE_PAYMENT
  BEFORE_ASSET_PAPER
  BEFORE_PUBLISHING
}

enum DocumentType {
  PAPER_ASSET
  IMAGES
  FOLDER
}

enum DocumentStatus {
  SUSPENDED
  AVAILABLE
}

enum PerkStatus {
  SUSPENDED
  AVAILABLE
}

enum PerkType {
  OTHERS
  KITCHEN
  BATHROOM
  WASHING_MACHINE
  WIFI
  AIR_CONDITIONING
  HOT_WATER
  SMOKE_DETECTOR
  HEATING
  PARKING
  TELEVISION
  WORKSPACE
  SWIMMING_POOL
}

enum ServiceName {
  CHECK_IN_CHECK_OUT
  LUGGAGE_STORAGE
  AIRPORT_TRANSFER
  LOCAL_TOUR_GUIDE
  MEAL_DELIVERY
  HOUSEKEEPING
  LAUNDRY_SERVICE
  BIKE_RENTAL
  CHILDCARE
  PET_SITTING
  PROPERTY_PHOTOGRAPHY
  LISTING_OPTIMIZATION
  PRICE_MANAGEMENT
  GUEST_SCREENING
  MAINTENANCE_COORDINATION
  DEEP_CLEANING
  TAX_PREPARATION
  INSURANCE_MANAGEMENT
  LEGAL_CONSULTATION
  MARKETING_BOOST
}

enum ServicePrice {
  PRICE_20
  PRICE_30
  PRICE_40
  PRICE_50
  PRICE_60
  PRICE_75
  PRICE_80
  PRICE_100
  PRICE_120
  PRICE_150
  PRICE_200
  PRICE_250
  PRICE_300
  PRICE_350
  PRICE_400
  PRICE_450
  PRICE_500
  PRICE_600
  PRICE_750
  PRICE_1000
  PRICE_O
}
